cmake_minimum_required(VERSION 3.14)
#set(CMAKE_C_COMPILER "gcc")
#set(CMAKE_CXX_COMPILER "g++")

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
  # set(CMAKE_BUILD_TYPE Debug)
endif()


set(CMAKE_CXX_FLAGS "-Wall -Wextra -Wpedantic")
set(CMAKE_CXX_FLAGS_DEBUG "-g -O0 -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -DRELEASE")

project(povu)

# GoogleTest requires at least C++14
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)


# Avoid warning about DOWNLOAD_EXTRACT_TIMESTAMP in CMake 3.24
# https://cmake.org/cmake/help/latest/policy/CMP0135.html
if (CMAKE_VERSION VERSION_GREATER_EQUAL "3.24.0")
  cmake_policy(SET CMP0135 NEW)
endif()

include(FetchContent)
FetchContent_Declare(
  googletest
  URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip
)


# For Windows: Prevent overriding the parent project's compiler/linker settings
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(googletest)
enable_testing()

include(sanitizers.cmake)

if (MSVC)
    # warning level 4
    add_compile_options(/W4)
else()
    # additional warnings
    add_compile_options(-Wall -Wextra -Wpedantic)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)



# Include libhandlegraph library
add_subdirectory(
# deps/gfakluge
  deps/libhandlegraph
)

ADD_LIBRARY(LibsModule
  # io
  src/io/from_gfa.cpp
  src/io/vcf.cpp

  # trees
  src/graph/bidirected.cpp
  src/graph/biedged.cpp
  src/graph/spanning_tree.cpp

  # common
  src/common/common.cpp
  src/common/utils.cpp

  # algorithms
  src/algorithms/cycle_equiv.cpp
  src/algorithms/tree_ops.cpp

  # cli
  src/cli/cli.cpp
  src/cli/app.cpp

  # genomics
  src/genomics/variant_calling.cpp
)

#include_directories(
#    ./deps/gfakluge/src
#    ./deps/gfakluge/src/tinyFA
#    ./deps/libhandlegraph/src/include
#)

include_directories(
  # deps
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/args/
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/gfakluge/src
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/gfakluge/src/tinyFA
  ${CMAKE_CURRENT_SOURCE_DIR}/deps/libhandlegraph/src/include
)

set(SOURCE_FILES
  src/main.cpp
)



# source
add_executable(povu
  ${SOURCE_FILES}
)

# recommended but does not work
# Specify the include directories for the target
#target_include_directories(povu
#    PRIVATE
#    ${CMAKE_CURRENT_SOURCE_DIR}/deps/gfakluge/src
#    ${CMAKE_CURRENT_SOURCE_DIR}/deps/gfakluge/src/tinyFA
#    ${CMAKE_CURRENT_SOURCE_DIR}/deps/libhandlegraph/src/include
#)

#target_include_directories(povu PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/build/libs/libhandlegraph)


#
# Link the library (LibsModule) and libhandlegraph to your executable
#target_link_libraries(
#  povu
#  LibsModule
#  handlegraph_static
#)

# Link the library (LibsModule) and libhandlegraph to your executable
target_link_libraries(povu PRIVATE LibsModule handlegraph_shared)

set(BINARY_DIR ./bin)

file(MAKE_DIRECTORY ${BINARY_DIR}/)


add_custom_command(TARGET povu
		   POST_BUILD
		   COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:povu> ../${BINARY_DIR}/)

add_executable( povu_test
  tests/main_tests.cc
)


#target_link_libraries(
#  povu_test
#  LibsModule
#  handlegraph
#  GTest::gtest_main
#)

# Link the library (LibsModule), libhandlegraph, and Google Test to your test executable
target_link_libraries(povu_test PRIVATE LibsModule handlegraph_static GTest::gtest_main)


include(GoogleTest)
gtest_discover_tests(povu_test)
